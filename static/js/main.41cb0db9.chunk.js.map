{"version":3,"sources":["About.tsx","Common.tsx","Validators.tsx","Names.tsx","Genders.tsx","Sources.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["About","className","Link","component","RLink","to","href","FormCard","props","Card","CardHeader","title","subheader","CardContent","children","SubmitButton","Button","color","variant","disabled","onClick","_event","ResetButton","err","e","_tag","value","ok","v","mapErr","r","f","requireNonempty","input","undefined","requirePred","pred","c","JSON","stringify","requireLetters","name","test","requireAscii","cp","codePointAt","requireNoSpace","requireEmail","all","validators","res","i","length","x","validate","validator","anyMissing","results","FirstAndLastForm","useState","submitted","setSubmitted","firstName","setFirstName","middleName","setMiddleName","lastName","setLastName","firstNameErr","middleNameErr","lastNameErr","isDisabled","FormControl","TextField","required","error","label","helperText","onChange","event","target","GivenAndSurnameForm","givenName","setGivenName","surname","setSurname","givenNameErr","surnameErr","PrefixesForm","MultipleNamesForm","allMissing","style","display","marginBottom","minWidth","SingleFieldNameForm","setName","nameErr","NoUnicodeForm","CharacterValidationForm","LengthValidationForm","lo","hi","IdealForm","preferred","setPreferred","preferredErr","Names","id","SampleForm","username","setUsername","email","setEmail","gender","setGender","usernameErr","emailErr","InputLabel","Select","MenuItem","BinaryDropdownWithOptOut","BinaryDropdownWithOptOutAndField","explanationEnabled","setExplanationEnabled","explanation","setExplanation","explanationErr","val","BadCheckboxes","isChecked","setIsChecked","changed","setChanged","check","option","checked","cur","noneChecked","every","k","checkboxErr","FormLabel","FormGroup","FormControlLabel","control","Checkbox","FormHelperText","BetterCheckboxes","isGenderChecked","setIsGenderChecked","genderChanged","setGenderChanged","alignment","setAlignment","noGenderChecked","noAlignmentChecked","genderCheckboxErr","RadioGroup","Radio","TextboxGender","genderErr","Genders","margin","justifyContent","alignItems","textAlign","src","process","alt","Sources","Bar","AppBar","position","Toolbar","Typography","flexGrow","IconButton","Page","Container","maxWidth","App","url","basename","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41cb0db9.chunk.js","sourcesContent":["import { Link } from '@material-ui/core';\nimport { Link as RLink } from 'react-router-dom';\n\nexport default function About() {\n    return (\n        <>\n            <h2 className=\"page-header\">Background</h2>\n\n            <p className=\"page-text\">With the proliferation of the Internet and online services, we can reach more people than ever before. From government services to social media, we not only collect more data on our customers, users, and citizens than ever before, but many services find themselves tasked with the challenge of collecting data from an increasingly diverse and international userbase.</p>\n\n            <p className=\"page-text\">In this environment, our normal assumptions about personal information break down; if we expect a user to always have, for example, a single immutable first and last name or a binary gender, we will end up unintentionally excluding many potential users. The design of a form or a database could act as a gate blocking people from important information and services.</p>\n\n            <p className=\"page-text\">As programmers, developers, and designers, this means we have to challenge our usual assumptions, and be conscious of the intersectional impacts of our designs and decisions.</p>\n\n            <h2 className=\"page-header\">Navigation</h2>\n\n            <p className=\"page-text\">This website addresses the collection of two critical types of user data: names and genders. To get started, navigate to the <Link component={RLink} to=\"/names\">Names</Link> or <Link component={RLink} to=\"/genders\">Genders</Link> page in the bar above.</p>\n\n            <p className=\"page-text\">Throughout the pages, there will be several example forms. Readers are encouraged to test out the forms, as they may show additional content once completed. Note that the forms in each page are for demonstration only, and do not collect any information. At times, minimal validation is run over the contents for demonstrative purposes, but this is done locally; no service ever receives this information.</p>\n\n            <h2 className=\"page-header\">Reading</h2>\n\n            <p className=\"page-text\">This project was originally inspired by the excellent paper <Link href=\"https://dl.acm.org/doi/10.1145/3411764.3445742\">Revisiting Gendered Web Forms: An Evaluation of Gender Inputs with (Non-)Binary People</Link>, as well as the <Link href=\"https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/\">Falsehoods Programmers Believe About Names</Link> blog post.</p>\n\n            <p className=\"page-text\">For a complete list of sources, and for further reading on best practices around collecting and inputting user data, see the <Link component={RLink} to=\"/sources\">Sources page</Link>.</p>\n        </>\n    );\n}","import React from 'react';\nimport { Card, CardHeader, CardContent, Button } from '@material-ui/core';\n\nexport function FormCard(props: React.PropsWithChildren<{\n    title: string,\n    subheader?: string,\n}>) {\n    return (\n        <>\n            <Card>\n                <CardHeader className=\"form-card-header\" title={props.title} subheader={props.subheader} />\n                <CardContent>\n                    {props.children}\n                </CardContent>\n            </Card>\n        </>\n    );\n}\n\nexport function SubmitButton(props: {\n    disabled: boolean,\n    onClick: () => void,\n}) {\n    return (\n        <Button\n            className=\"submit-button\"\n            color=\"primary\"\n            variant=\"contained\"\n            disabled={props.disabled}\n            onClick={(_event) => props.onClick()}\n        >\n            Submit\n        </Button>\n    );\n}\n\nexport function ResetButton(props: {\n    onClick: () => void,\n}) {\n    return (\n        <Button\n            className=\"submit-button\"\n            color=\"secondary\"\n            variant=\"outlined\"\n            onClick={(_event) => props.onClick()}\n        >\n            Reset\n        </Button>\n    );\n}","type NonEmpty<T> = [T, ...T[]];\ntype Result<E, A> = { _tag: \"err\"; value: E; } | { _tag: \"ok\"; value: A; };\n\nfunction err<E>(e: E): Result<E, never> { return { _tag: \"err\", value: e } }\nfunction ok<A>(v: A): Result<never, A> { return { _tag: \"ok\", value: v } }\n\nexport function mapErr<E1, E2, A>(r: Result<E1, A>, f: (e: E1) => E2): Result<E2, A> {\n    if (r._tag === \"ok\") {\n        return ok(r.value);\n    } else {\n        return err(f(r.value));\n    }\n}\n\nexport function bind<E, A, B>(r1: Result<E, A>, k: (val: A) => Result<E, B>): Result<E, B> {\n    if (r1._tag === \"ok\") {\n        return k(r1.value);\n    } else {\n        return err(r1.value);\n    }\n}\n\ntype Validator = (input: string) => Result<string, undefined>;\n\nexport const requireNonempty: Validator = (input: string) => {\n    if (input === \"\") {\n        return err(\"Required field\");\n    }\n    return ok(undefined);\n}\n\nexport function requireLength(lo: number, hi: number): Validator {\n    return (input: string) => {\n        if (input.length < lo) {\n            return err(\"Must be at least \" + lo + \" characters\");\n        } else if (input.length > hi) {\n            return err(\"Must be less than \" + hi + \" characters\");\n        } else {\n            return ok(undefined);\n        }\n    }\n}\n\nexport function requirePred(pred: (c: string) => boolean): (input: string) => Result<string, undefined> {\n    return (input) => {\n        for (const c of input) {\n            if (!pred(c)) {\n                return err(\"Disallowed character: \" + JSON.stringify(c));\n            }\n        }\n        return ok(undefined);\n    };\n}\n\nexport const requireLetters: Validator = (name: string) => {\n    return mapErr(\n        requirePred((c: string) => /[\\p{L} ]/u.test(c))(name),\n        () => \"Only letters and spaces allowed\",\n    );\n}\n\nexport const requireAscii: Validator = (name: string) => {\n    return mapErr(\n        requirePred((c: string) => {\n            let cp = c.codePointAt(0)\n            return cp !== undefined && cp <= 127;\n        })(name),\n        () => \"Invalid characters\",\n    );\n}\n\nexport const requireNoSpace: Validator = (input: string) => {\n    if (/\\s/.test(input)) {\n        return err(\"May not contain spaces\");\n    }\n    return ok(undefined);\n}\n\n// NOTE: regex borrowed from Devise library\n// this is not the correct way to validate emails, but it's good enough for demonstration purposes\nexport const requireEmail: Validator = (input: string) => {\n    if (/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i.test(input)) {\n        return ok(undefined);\n    }\n    return err(\"Invalid email\");\n}\n\nexport function all(validators: NonEmpty<Validator>): Validator {\n    return (input: string) => {\n        let res = validators[0](input);\n        if (res._tag === \"err\") {\n            return res;\n        }\n        for (let i = 1; i < validators.length; i++) {\n            let x = validators[i](input);\n            if (x._tag === \"err\") {\n                return x;\n            }\n        }\n        return ok(undefined);\n    }\n}\n\nexport function validate(validator: Validator, input: string | undefined): string | undefined {\n    if (input === undefined) {\n        return undefined;\n    } else {\n        return validator(input).value;\n    }\n}\n\nexport function anyMissing(...results: ([string | undefined, string | undefined])[]): boolean {\n    for (const [input, e] of results) {\n        if (input === undefined || e !== undefined) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport function allMissing(...results: ([string | undefined, string | undefined])[]): boolean {\n    for (const [input, e] of results) {\n        if (input !== undefined && e === undefined) {\n            return false;\n        }\n    }\n    return true;\n}","import { useState } from 'react';\nimport { FormControl, TextField } from '@material-ui/core';\nimport { FormCard, SubmitButton, ResetButton } from './Common';\nimport { anyMissing, allMissing, all, validate, requireNonempty, requireNoSpace, requireLength, requireLetters, requireAscii } from './Validators';\n\nfunction FirstAndLastForm() {\n    const [submitted, setSubmitted] = useState(false);\n    const [firstName, setFirstName] = useState<string | undefined>(undefined);\n    const [middleName, setMiddleName] = useState<string>(\"\");\n    const [lastName, setLastName] = useState<string | undefined>(undefined);\n\n    const firstNameErr = validate(all([requireNonempty, requireNoSpace]), firstName);\n    const middleNameErr = validate(all([requireNoSpace]), middleName);\n    const lastNameErr = validate(all([requireNonempty, requireNoSpace]), lastName);\n    const isDisabled = anyMissing([firstName, firstNameErr], [middleName, middleNameErr], [lastName, lastNameErr]);\n\n    if (!submitted) {\n        return (\n            <>\n                <div>\n                    <FormControl className=\"form-control\">\n                        <TextField\n                            required\n                            error={firstNameErr !== undefined}\n                            label=\"First name\"\n                            variant=\"filled\"\n                            helperText={firstNameErr}\n                            onChange={(event) => setFirstName(event.target.value as string)}\n                        />\n                    </FormControl>\n                    <FormControl className=\"form-control\">\n                        <TextField\n                            error={middleNameErr !== undefined}\n                            label=\"Middle name\"\n                            variant=\"filled\"\n                            helperText={middleNameErr}\n                            onChange={(event) => setMiddleName(event.target.value as string)}\n                        />\n                    </FormControl>\n                    <FormControl className=\"form-control\">\n                        <TextField\n                            required\n                            error={lastNameErr !== undefined}\n                            label=\"Last name\"\n                            variant=\"filled\"\n                            helperText={lastNameErr}\n                            onChange={(event) => setLastName(event.target.value as string)}\n                        />\n                    </FormControl>\n                </div>\n                <SubmitButton disabled={isDisabled} onClick={() => {\n                    setSubmitted(true);\n                }} />\n            </>\n        );\n    } else {\n        let name = \"\";\n        if (firstName !== undefined) {\n            name += firstName;\n        }\n        if (middleName !== \"\") {\n            name += \" \" + middleName;\n        }\n        if (lastName !== undefined && lastName !== \"\") {\n            name += \" \" + lastName;\n        }\n        return (\n            <>\n                <p>The name you entered was: <b>{name}</b></p>\n\n                <p>Is the above name shown in the right order? What if you entered a Chinese name?</p>\n\n                <p>What do the terms \"first name\" and \"last name\" mean to you?</p>\n                <ResetButton onClick={() => {\n                    setSubmitted(false);\n                    setFirstName(undefined);\n                    setMiddleName(\"\");\n                    setLastName(undefined);\n                }} />\n            </>\n        );\n    }\n}\n\nfunction GivenAndSurnameForm() {\n    const [submitted, setSubmitted] = useState(false);\n    const [givenName, setGivenName] = useState<string | undefined>(undefined);\n    const [middleName, setMiddleName] = useState<string>(\"\");\n    const [surname, setSurname] = useState<string | undefined>(undefined);\n\n    const givenNameErr = validate(all([requireNonempty, requireNoSpace]), givenName);\n    const middleNameErr = validate(all([requireNoSpace]), middleName);\n    const surnameErr = validate(all([requireNonempty, requireNoSpace]), surname);\n    const isDisabled = anyMissing([givenName, givenNameErr], [middleName, middleNameErr], [surname, surnameErr]);\n\n    if (!submitted) {\n        return (\n            <>\n                <div>\n                    <FormControl className=\"form-control\">\n                        <TextField\n                            required\n                            error={givenNameErr !== undefined}\n                            label=\"Given name\"\n                            variant=\"filled\"\n                            helperText={givenNameErr}\n                            onChange={(event) => setGivenName(event.target.value as string)}\n                        />\n                    </FormControl>\n                    <FormControl className=\"form-control\">\n                        <TextField\n                            error={middleNameErr !== undefined}\n                            label=\"Middle name\"\n                            variant=\"filled\"\n                            helperText={middleNameErr}\n                            onChange={(event) => setMiddleName(event.target.value as string)}\n                        />\n                    </FormControl>\n                    <FormControl className=\"form-control\">\n                        <TextField\n                            required\n                            error={surnameErr !== undefined}\n                            label=\"Family name/surname\"\n                            variant=\"filled\"\n                            helperText={surnameErr}\n                            onChange={(event) => setSurname(event.target.value as string)}\n                        />\n                    </FormControl>\n                </div>\n                <SubmitButton disabled={isDisabled} onClick={() => {\n                    setSubmitted(true);\n                }} />\n            </>\n        );\n    } else {\n        let name = \"\";\n        if (givenName !== undefined) {\n            name += givenName;\n        }\n        if (middleName !== \"\") {\n            name += \" \" + middleName;\n        }\n        if (surname !== undefined && surname !== \"\") {\n            name += \" \" + surname;\n        }\n        return (\n            <>\n                <p>The name you entered was: <b>{name}</b></p>\n\n                <p>Now more of our users will know which of their names go in which box!</p>\n\n                <p>However, we still have a problem. Did the name above show up in the correct order?</p>\n\n                <p>In Chinese, the surname is usually presented first, opposite of the norm in English. For example, the name of the famous cellist Yo-Yo Ma is written 马友友 (mǎ yǒu yǒu) in Chinese, where the surname is 马 and the given name is 友友. Does his name show up in the correct order when entered in English? What about in Chinese? Was the name correctly formatted?</p>\n                <ResetButton onClick={() => {\n                    setSubmitted(false);\n                    setGivenName(undefined);\n                    setMiddleName(\"\");\n                    setSurname(undefined);\n                }} />\n            </>\n        );\n    }\n}\n\nfunction PrefixesForm() {\n    const [submitted, setSubmitted] = useState(false);\n    const [givenName, setGivenName] = useState<string | undefined>(undefined);\n    const [middleName, setMiddleName] = useState<string>(\"\");\n    const [surname, setSurname] = useState<string | undefined>(undefined);\n\n    const givenNameErr = validate(all([requireNonempty]), givenName);\n    const surnameErr = validate(all([requireNonempty]), surname);\n    const isDisabled = anyMissing([givenName, givenNameErr], [surname, surnameErr]);\n\n    if (!submitted) {\n        return (\n            <>\n                <div>\n                    <FormControl className=\"form-control\">\n                        <TextField\n                            required\n                            error={givenNameErr !== undefined}\n                            label=\"Given name\"\n                            variant=\"filled\"\n                            helperText={givenNameErr}\n                            onChange={(event) => setGivenName(event.target.value as string)}\n                        />\n                    </FormControl>\n                    <FormControl className=\"form-control\">\n                        <TextField\n                            label=\"Middle name\"\n                            variant=\"filled\"\n                            onChange={(event) => setMiddleName(event.target.value as string)}\n                        />\n                    </FormControl>\n                    <FormControl className=\"form-control\">\n                        <TextField\n                            required\n                            error={surnameErr !== undefined}\n                            label=\"Family name/surname\"\n                            variant=\"filled\"\n                            helperText={surnameErr}\n                            onChange={(event) => setSurname(event.target.value as string)}\n                        />\n                    </FormControl>\n                </div>\n                <SubmitButton disabled={isDisabled} onClick={() => {\n                    setSubmitted(true);\n                }} />\n            </>\n        );\n    } else {\n        return (\n            <>\n                <p>The given name you entered was: <b>{givenName}</b></p>\n                {\n                    middleName === \"\"\n                        ? <p>You did not give a middle name</p>\n                        : <p>The middle name you entered was: <b>{middleName}</b></p>\n                }\n                <p>The family name you entered was: <b>{surname}</b></p>\n\n                <p>Find a famous person whose name contains an affix (Spanish, Brazilian, and Dutch names are a few examples of names that often contain prefixes). Is their name accepted by the form?</p>\n\n                <p>Consider which name an affix should be associated with. Is it obvious which box the affix(es) should be placed in?</p>\n\n                <ResetButton onClick={() => {\n                    setSubmitted(false);\n                    setGivenName(undefined);\n                    setMiddleName(\"\");\n                    setSurname(undefined);\n                }} />\n            </>\n        );\n    }\n}\n\nfunction MultipleNamesForm() {\n    const [submitted, setSubmitted] = useState(false);\n    const [givenName, setGivenName] = useState<string | undefined>(undefined);\n    const [surname, setSurname] = useState<string | undefined>(undefined);\n\n    const givenNameErr = validate(all([requireNonempty]), givenName);\n    const surnameErr = validate(all([requireNonempty]), surname);\n    const isDisabled = allMissing([givenName, givenNameErr], [surname, surnameErr]);\n\n    if (!submitted) {\n        return (\n            <>\n                <div>\n                    <FormControl className=\"form-control\" style={{ display: \"block\", marginBottom: \"10px\" }}>\n                        <TextField\n                            label=\"Family names/surnames\"\n                            variant=\"filled\"\n                            onChange={(event) => setSurname(event.target.value as string)}\n                            style={{ minWidth: \"20em\" }}\n                        />\n                    </FormControl>\n                    <FormControl className=\"form-control\" style={{ display: \"block\" }}>\n                        <TextField\n                            label=\"Other/given names\"\n                            variant=\"filled\"\n                            onChange={(event) => setGivenName(event.target.value as string)}\n                            style={{ minWidth: \"20em\" }}\n                        />\n                    </FormControl>\n                </div>\n                <SubmitButton disabled={isDisabled} onClick={() => {\n                    setSubmitted(true);\n                }} />\n            </>\n        );\n    } else {\n        return (\n            <>\n                <p>The family name(s) you entered were: <b>{surname}</b></p>\n                <p>The given name(s) you entered were: <b>{givenName}</b></p>\n\n                <p>Does this handle all of the cases discussed above? When might this still be confusing to those who have multiple surnames or given names?</p>\n\n                <ResetButton onClick={() => {\n                    setSubmitted(false);\n                    setGivenName(undefined);\n                    setSurname(undefined);\n                }} />\n            </>\n        );\n    }\n}\n\nfunction SingleFieldNameForm() {\n    const [submitted, setSubmitted] = useState(false);\n    const [name, setName] = useState<string | undefined>(undefined);\n\n    const nameErr = validate(all([requireNonempty]), name);\n    const isDisabled = anyMissing([name, nameErr]);\n\n    if (!submitted) {\n        return (\n            <>\n                <div>\n                    <FormControl className=\"form-control\">\n                        <TextField\n                            required\n                            error={nameErr !== undefined}\n                            label=\"Full name\"\n                            variant=\"filled\"\n                            helperText={nameErr}\n                            onChange={(event) => setName(event.target.value as string)}\n                            style={{ minWidth: \"20em\" }}\n                        />\n                    </FormControl>\n                </div>\n                <SubmitButton disabled={isDisabled} onClick={() => {\n                    setSubmitted(true);\n                }} />\n            </>\n        );\n    } else {\n        return (\n            <>\n                <p>The name you entered was: <b>{name}</b></p>\n\n                <ResetButton onClick={() => {\n                    setSubmitted(false);\n                    setName(undefined);\n                }} />\n            </>\n        );\n    }\n}\n\nfunction NoUnicodeForm() {\n    const [submitted, setSubmitted] = useState(false);\n    const [name, setName] = useState<string | undefined>(undefined);\n\n    const nameErr = validate(all([requireNonempty, requireAscii]), name);\n    const isDisabled = anyMissing([name, nameErr])\n\n    if (!submitted) {\n        return (\n            <>\n                <div>\n                    <FormControl className=\"form-control\">\n                        <TextField\n                            required\n                            error={nameErr !== undefined}\n                            label=\"Full name\"\n                            variant=\"filled\"\n                            helperText={nameErr}\n                            onChange={(event) => setName(event.target.value as string)}\n                            style={{ minWidth: \"20em\" }}\n                        />\n                    </FormControl>\n                </div>\n                <SubmitButton disabled={isDisabled} onClick={() => setSubmitted(true)} />\n            </>\n        );\n    } else {\n        return (\n            <>\n                <p>The name you entered was: <b>{name}</b></p>\n\n                <p>This form is programmed to disallow any character that is outside of ASCII, a very restrictive character set optimized for the Latin alphabet.</p>\n\n                <p>This disallows any names with characters outside of ASCII, such as names containing Chinese characters, Korean hangul, any of the three Japanese character sets, Arabic, Devanagari, and more!</p>\n\n                <ResetButton onClick={() => {\n                    setSubmitted(false);\n                    setName(undefined);\n                }} />\n            </>\n        );\n    }\n}\n\nfunction CharacterValidationForm() {\n    const [submitted, setSubmitted] = useState(false);\n    const [name, setName] = useState<string | undefined>(undefined);\n\n    const nameErr = validate(all([requireNonempty, requireLetters]), name);\n    const isDisabled = anyMissing([name, nameErr])\n\n    if (!submitted) {\n        return (\n            <>\n                <div>\n                    <FormControl className=\"form-control\">\n                        <TextField\n                            required\n                            error={nameErr !== undefined}\n                            label=\"Full name\"\n                            variant=\"filled\"\n                            helperText={nameErr}\n                            onChange={(event) => setName(event.target.value as string)}\n                            style={{ minWidth: \"20em\" }}\n                        />\n                    </FormControl>\n                </div>\n                <SubmitButton disabled={isDisabled} onClick={() => setSubmitted(true)} />\n            </>\n        );\n    } else {\n        return (\n            <>\n                <p>The name you entered was: <b>{name}</b></p>\n\n                <p>Did you find the character restriction? What kinds of characters are disallowed?</p>\n\n                <p>Some punctuation characters can appear in names, like apostrophes and hyphens. These are the only two punctuation marks a name may <em>officially</em> contain in the United States. Are there any punctuation characters that do not appear in any names?</p>\n\n                <p>If you answered yes, are you <em>sure</em>?</p>\n\n                <ResetButton onClick={() => {\n                    setSubmitted(false);\n                    setName(undefined);\n                }} />\n            </>\n        );\n    }\n}\n\nfunction LengthValidationForm() {\n    const [submitted, setSubmitted] = useState(false);\n    const [name, setName] = useState<string | undefined>(undefined);\n\n    const nameErr = validate(all([requireNonempty, requireLength(3, 30)]), name);\n    const isDisabled = anyMissing([name, nameErr])\n\n    if (!submitted) {\n        return (\n            <>\n                <div>\n                    <FormControl className=\"form-control\">\n                        <TextField\n                            required\n                            error={nameErr !== undefined}\n                            label=\"Full name\"\n                            variant=\"filled\"\n                            helperText={nameErr}\n                            onChange={(event) => setName(event.target.value as string)}\n                            style={{ minWidth: \"20em\" }}\n                        />\n                    </FormControl>\n                </div>\n                <SubmitButton disabled={isDisabled} onClick={() => setSubmitted(true)} />\n            </>\n        );\n    } else {\n        return (\n            <>\n                <p>The name you entered was: <b>{name}</b></p>\n\n                <p>This form places restrictions on the length of names. Can you think of anyone with a very short name (even just a short given name or surname)? What about a very long name?</p>\n\n                <ResetButton onClick={() => {\n                    setSubmitted(false);\n                    setName(undefined);\n                }} />\n            </>\n        );\n    }\n}\n\nfunction IdealForm() {\n    const [submitted, setSubmitted] = useState(false);\n    const [name, setName] = useState<string | undefined>(undefined);\n    const [preferred, setPreferred] = useState<string | undefined>(undefined);\n\n    const nameErr = validate(all([requireNonempty]), name);\n    const preferredErr = validate(all([requireNonempty]), preferred);\n    const isDisabled = anyMissing([name, nameErr], [preferred, preferredErr])\n\n    if (!submitted) {\n        return (\n            <>\n                <div>\n                    <FormControl className=\"form-control\" style={{ display: \"block\", marginBottom: \"10px\" }}>\n                        <TextField\n                            required\n                            error={nameErr !== undefined}\n                            label=\"Full name\"\n                            variant=\"filled\"\n                            helperText={nameErr ?? \"Your full legal name\"}\n                            onChange={(event) => setName(event.target.value as string)}\n                            style={{ minWidth: \"20em\" }}\n                        />\n                    </FormControl>\n                    <FormControl className=\"form-control\" style={{ display: \"block\" }}>\n                        <TextField\n                            required\n                            error={preferredErr !== undefined}\n                            label=\"What should we call you?\"\n                            variant=\"filled\"\n                            helperText={preferredErr ?? \"How you'd like us to refer to you in communications\"}\n                            onChange={(event) => setPreferred(event.target.value as string)}\n                            style={{ minWidth: \"20em\" }}\n                        />\n                    </FormControl>\n                </div>\n                <SubmitButton disabled={isDisabled} onClick={() => setSubmitted(true)} />\n            </>\n        );\n    } else {\n        return (\n            <>\n                <p>Thanks, {preferred}!</p>\n\n                <p>When possible, examples or clarification should be given next to inputs, in case someone isn't sure what kind of answer is expected.</p>\n\n                <ResetButton onClick={() => {\n                    setSubmitted(false);\n                    setName(undefined);\n                }} />\n            </>\n        );\n    }\n}\n\nexport default function Names(props: {}) {\n    return (\n        <>\n            <h2 className=\"page-header\" id=\"names\">Names</h2>\n\n            <p className=\"page-text\">Names are beautiful, unique, complicated things. They can be used to identify and to show respect, to include and to exclude. With this in mind, it is important to keep in mind the different kinds of names we may encounter.</p>\n\n            <p className=\"page-text\">It's natural that programmers in a country such as the United States will be made up mostly of people with fairly \"standard\" \"American\" names. For most Americans, this means having a first and last name, as well as perhaps a middle name, and maybe a title. It's tempting to base user data off of this standard, and dismiss any names outside of this norm as being too \"weird\", or simply unlikely to occur in your use case. However, even within the United States, we can find plenty of scenarios that challenge these assumptions. Behind these edge cases are real people with real names, and being unable to input one's name can be an obstacle to accessing important services.</p>\n\n            <h3 className=\"page-header\" id=\"internationalization\">Internationalization</h3>\n\n            <p className=\"page-text\">In the United States, the most common name format is a first name and a last name, with potentially a middle name and title. One might expect to see a form like this:</p> \n\n            <FormCard title=\"Example Form\" subheader=\"First and last name\">\n                <FirstAndLastForm />\n            </FormCard>\n\n            <p className=\"page-text\">However, the first problem we run into is one with terminology. What do \"first name\" and \"last name\" mean? For many, the last name indicates a family name; in many cultures, however, names are not given in this order. For example, consider the famous Chinese basketball player Yao Ming. In Chinese, the surname is said first; his father, for example, is named Yao Zhiyuan.</p>\n\n            <p className=\"page-text\">Firstly, when discussing these name segments, we should prefer terms such as \"surname\"/\"family name\" and \"given name\":</p>\n\n            <FormCard title=\"Example Form\" subheader=\"Given name and family name\">\n                <GivenAndSurnameForm />\n            </FormCard>\n\n            <p className=\"page-text\">However, the above form still contains an error! After the name is processed, the name displayed is still shown in our first/middle/last order, and still doesn't work with Chinese names!</p>\n\n            <p className=\"page-text\">It is tempting to try to somehow determine what order the names should go in. However, this is not possible in general, and there will always be exceptions. Instead, we should keep the different parts of the name separate, rather than trying to reassemble them; for example, we might refer to a user simply as \"Mr. Smith\" or \"Ms. Chang\".</p>\n\n            <p className=\"page-text\">Unfortunately, names are complicated, and cannot always be divided this cleanly. Depending on your input above, you may or may not have noticed that each of the name fields cannot contain spaces! What do you do if your surname has a prefix or suffix? This is common in Dutch names, such as in that of Guido van Rossum, the creator of the Python programming language. In Dutch, \"van\" is a prefix, but cannot be omitted from the name; should it be considered a part of the last name \"van Rossum\"? Either way, we must allow spaces:</p>\n\n            <FormCard title=\"Example Form\" subheader=\"Affixes\">\n                <PrefixesForm />\n            </FormCard>\n\n            <p className=\"page-text\">In the above examples, the given name and the surname are both required, and there is only one field for each! Although most people in the United States have a single given name and surname, this is not the case for everyone.</p>\n\n            <p className=\"page-text\">Javanese, for example, usually only have a single given name, and no surname, such as Indonesian president Sukarno. Stage names are another well-known source of single names; some performers may even have passports under their stage names! On the other hand, some people may have more than three names! Portuguese names usually have one or two given names, and up to six surnames, each of which may be a phrase with multiple spaces; for example, consider Portuguese politician Marcelo Nuno Duarte Rebelo de Sousa.</p>\n\n            <p className=\"page-text\">If we must collect given names and family names, it is important to account for all of the above cases:</p>\n\n            <FormCard title=\"Example Form\" subheader=\"Multiple names with affixes\">\n                <MultipleNamesForm />\n            </FormCard>\n\n            <p className=\"page-text\">However, if possible, a name should simply be collected via a single field:</p>\n\n            <FormCard title=\"Example Form\" subheader=\"Single input field\">\n                {/* revised, just needs to be nonempty, simply validation in place */}\n                <SingleFieldNameForm />\n            </FormCard>\n\n            <h3 className=\"page-header\" id=\"validation\">Validation</h3>\n\n            <p className=\"page-text\">Okay, so we've changed our first and last name boxes into a single textbox. We should be able to handle everyone's name now, right?</p>\n\n            <p className=\"page-text\">Next, we want to perform some simple name validation, to detect spam, profanity, and jokes. We should determine if the name the user types is a \"valid\" name or not.</p>\n\n            <p className=\"page-text\">One common form of validation is restricting the character set, making it impossible for some characters to appear in names. A common error is disallowing \"weird\" characters; in practice, unfortunately, this often means \"characters outside of the English Latin alphabet\".</p>\n\n            <FormCard title=\"Example Form\" subheader=\"Non-Unicode restrictions\">\n                <NoUnicodeForm />\n            </FormCard>\n\n            <p className=\"page-text\">In order to ensure proper internationalization, all forms must be able to take Unicode input. While not everyone's name is mapped in Unicode, and not everyone's name may be written in one way or even written down at all, Unicode is the closest we can come in today's world.</p>\n\n            <p className=\"page-text\">Even when forms handle Unicode properly, some additional restrictions may still be placed on the characters that can appear. Can you find any problems with the form below?</p>\n\n            <FormCard title=\"Example Form\" subheader=\"Other character restrictions\">\n                <CharacterValidationForm />\n            </FormCard>\n\n            <p className=\"page-text\">As a hint, here are a few names that would not be accepted:</p>\n\n            <ul className=\"page-text\">\n                <li>Karine Jean-Pierre</li>\n                <li>Dylan O'Brien</li>\n                <li>Reneé Rapp</li>\n                <li>Jennifer 8 Lee &mdash; yes, numbers may appear in names!</li>\n            </ul>\n\n            <p className=\"page-text\">The following form now properly accepts arbitrary Unicode with no character restrictions, but still contains some overly-restrictive validation rules. Can you find a name that wouldn't be accepted in the form below?</p>\n\n            <FormCard title=\"Example Form\" subheader=\"Other input validation\">\n                <LengthValidationForm />\n            </FormCard>\n\n            <p className=\"page-text\">This form validates based on the length of the input; the entered name must be between 3 and 30 characters long. To a programmer, this might seem like a reasonable restriction. After all, most people haven't heard of anyone with a single-letter name, and a programmer wants to set an upper bound on how long a field in their database will be.</p>\n\n            <p className=\"page-text\">Single-letter names are indeed rare, and found most often in surnames. For example, \"O\" is a Belgian surname, some Chinese surnames may be transliterated as \"E\", and who could forget Malcolm X?</p>\n\n            <p className=\"page-text\">Most established maximum character limits are major underestimations. For example, the form above accepts at names of at most 30 characters, but what about Janice Keihanaikukauakahihulihe'ekahaunaele, with her 36-character surname?</p>\n\n            <p className=\"page-text\">Okay, so we'll increase the upper bound. Surely 100 characters will be more than enough, right? What about the famous artist Picasso, whose full 122-character name is \"Pablo Diego José Francisco de Paula Juan Nepomuceno María de los Remedios Cipriano de la Santísima Trinidad Ruiz y Picasso\"?</p>\n\n            <p className=\"page-text\">To put maximum character limits into perspective, most names in Japanese consist of 4 or fewer kanji, and so forms in Japan are designed around this expectation. Meanwhile, most American surnames contain five to seven characters; imagine a Jordan Smith attempting to type in their name and encountering a limit of 10 characters!</p>\n\n            <h3 className=\"page-header\" id=\"solutions\">Solutions</h3>\n\n            <p className=\"page-text\">The most practical solution is a single Unicode text field, or if collecting surnames is necessary, two fields for surnames and given names. However, because some may not want others to address them by their given name, it is best to ask directly:</p>\n\n            <FormCard title=\"Example Form\" subheader=\"The recommended approach\">\n                <IdealForm />\n            </FormCard>\n\n            <p className=\"page-text\">This is not the solution to all name-related issues, however. It is important to remember that a person doesn't necessarily only have one full name, or even one full name at a time! Whether someone changes their name or uses multiple names, it is important to remain flexible and ensure that names are not immutable.</p>\n\n            <p className=\"page-text\">Where legal names are required, this fact should be detailed; some may use a different name in a legal context, and not knowing which to use can make completing a form much more difficult.</p>\n\n            <p className=\"page-text\">Finally, the best solution is to not collect names in the first place! More often than not, a username will suffice.</p>\n        </>\n    );\n}\n","import { useState } from 'react';\nimport { FormControl, Select, MenuItem, InputLabel, TextField, FormGroup, FormControlLabel, Checkbox, FormHelperText, FormLabel, RadioGroup, Radio, Link } from '@material-ui/core';\nimport { FormCard, SubmitButton, ResetButton } from './Common';\nimport { all, anyMissing, requireEmail, requireNonempty, requirePred, validate } from './Validators';\n\nfunction SampleForm() {\n    const [submitted, setSubmitted] = useState(false);\n    const [name, setName] = useState<string | undefined>(undefined);\n    const [username, setUsername] = useState<string | undefined>(undefined);\n    const [email, setEmail] = useState<string | undefined>(undefined);\n    const [gender, setGender] = useState('');\n\n    const nameErr = validate(requireNonempty, name);\n    const usernameErr = validate(all([requireNonempty, requirePred((c) => /[a-zA-Z0-9_-]/.test(c))]), username);\n    const emailErr = validate(all([requireNonempty, requireEmail]), email);\n    const isDisabled = gender === '' || anyMissing([name, nameErr], [email, emailErr]);\n\n    if (!submitted) {\n        return (\n            <>\n                <div>\n                    <FormControl className=\"form-control\" style={{ display: \"block\", marginBottom: \"10px\" }}>\n                        <TextField\n                            required\n                            error={nameErr !== undefined}\n                            label=\"Full name\"\n                            variant=\"filled\"\n                            helperText={nameErr}\n                            onChange={(event) => setName(event.target.value as string)}\n                            style={{ minWidth: \"20em\" }}\n                        />\n                    </FormControl>\n                    <FormControl className=\"form-control\" style={{ display: \"block\", marginBottom: \"10px\" }}>\n                        <TextField\n                            required\n                            error={usernameErr !== undefined}\n                            label=\"Username\"\n                            variant=\"filled\"\n                            helperText={usernameErr}\n                            onChange={(event) => setUsername(event.target.value as string)}\n                            style={{ minWidth: \"20em\" }}\n                        />\n                    </FormControl>\n                    <FormControl className=\"form-control\" style={{ display: \"block\", marginBottom: \"10px\" }}>\n                        <TextField\n                            required\n                            error={emailErr !== undefined}\n                            label=\"Email\"\n                            variant=\"filled\"\n                            helperText={emailErr}\n                            onChange={(event) => setEmail(event.target.value as string)}\n                            style={{ minWidth: \"20em\" }}\n                        />\n                    </FormControl>\n                    <FormControl className=\"form-control\" style={{ display: \"block\", marginBottom: \"10px\" }}>\n                        <InputLabel>Gender</InputLabel>\n                        <Select\n                            value={gender}\n                            onChange={(event) => setGender(event.target.value as string)}\n                            style={{ minWidth: \"10em\" }}\n                        >\n                            <MenuItem value={\"female\"}>Female</MenuItem>\n                            <MenuItem value={\"male\"}>Male</MenuItem>\n                        </Select>\n                    </FormControl>\n                </div>\n                <SubmitButton disabled={isDisabled} onClick={() => setSubmitted(true)} />\n            </>\n        );\n    } else {\n        return (\n            <>\n                <p>This is a typical form that might be used during registration for a website or other service.</p>\n\n                <p>How was the gender information collected? How might this impact users of different gender identities?</p>\n\n                <p>Many important services use a form like this. If you were not able to input your correct gender, for which services would you be willing to input inaccurate information? Which services would you stop using?</p>\n\n                <i>Note: the email validation in this form is for demonstration only, and is not suitable for a real-life application. Remember, the only reliable way to validate an email is to send the user an email!</i>\n\n                <ResetButton onClick={() => {\n                    setSubmitted(false);\n                    setName(undefined);\n                    setUsername(undefined);\n                    setEmail(undefined);\n                    setGender('');\n                }} />\n            </>\n        );\n    }\n}\n\nfunction BinaryDropdownWithOptOut() {\n    const [submitted, setSubmitted] = useState(false);\n    const [gender, setGender] = useState('');\n\n    const isDisabled = gender === '';\n\n    if (!submitted) {\n        return (\n            <>\n                <div>\n                    <FormControl className=\"form-control\" style={{ display: \"block\", marginBottom: \"10px\" }}>\n                        <InputLabel>Gender</InputLabel>\n                        <Select\n                            value={gender}\n                            onChange={(event) => setGender(event.target.value as string)}\n                            style={{ minWidth: \"10em\" }}\n                        >\n                            <MenuItem value={\"female\"}>Female</MenuItem>\n                            <MenuItem value={\"male\"}>Male</MenuItem>\n                            <MenuItem value={\"other\"}>Other</MenuItem>\n                            <MenuItem value={\"opt-out\"}>Prefer not to say</MenuItem>\n                        </Select>\n                    </FormControl>\n                </div>\n                <SubmitButton disabled={isDisabled} onClick={() => setSubmitted(true)} />\n            </>\n        );\n    } else {\n        return (\n            <>\n                <p>This is an example of othering nonbinary individuals and limiting their flexibility.</p>\n                <ResetButton onClick={() => {\n                    setSubmitted(false);\n                    setGender('');\n                }} />\n            </>\n        );\n    }\n}\n\nfunction BinaryDropdownWithOptOutAndField() {\n    const [submitted, setSubmitted] = useState(false);\n    const [gender, setGender] = useState('');\n    const [explanationEnabled, setExplanationEnabled] = useState(false);\n    const [explanation, setExplanation] = useState<string | undefined>(undefined);\n\n    const explanationErr = validate(requireNonempty, explanation);\n    const isDisabled = gender === '' || (explanationEnabled && anyMissing([explanation, explanationErr]));\n\n    if (!submitted) {\n        return (\n            <>\n                <div>\n                    <FormControl className=\"form-control\">\n                        <InputLabel>Gender</InputLabel>\n                        <Select\n                            value={gender}\n                            onChange={(event) => {\n                                let val = event.target.value as string;\n                                setGender(val)\n                                if (val === 'other') {\n                                    setExplanationEnabled(true);\n                                } else {\n                                    setExplanation(undefined);\n                                    setExplanationEnabled(false);\n                                }\n                            }}\n                            style={{ minWidth: \"10em\" }}\n                        >\n                            <MenuItem value={\"female\"}>Female</MenuItem>\n                            <MenuItem value={\"male\"}>Male</MenuItem>\n                            <MenuItem value={\"other\"}>Other</MenuItem>\n                            <MenuItem value={\"opt-out\"}>Prefer not to say</MenuItem>\n                        </Select>\n                    </FormControl>\n                    <FormControl className=\"form-control\">\n                        <TextField\n                            required={explanationEnabled}\n                            disabled={!explanationEnabled}\n                            error={explanationEnabled && explanationErr !== undefined}\n                            label=\"Explain (if other)\"\n                            helperText={explanationErr}\n                            onChange={(event) => setExplanation(event.target.value as string)}\n                            style={{ minWidth: \"10em\" }}\n                        />\n                    </FormControl>\n                </div>\n                <SubmitButton disabled={isDisabled} onClick={() => setSubmitted(true)} />\n            </>\n        );\n    } else {\n        return (\n            <>\n                <p>This is an attempt to expand the flexibility of the form above.</p>\n                <p>What are the limitations of this form? What are some ideas you have to increase the flexibility and multiplicity of this form?</p>\n                <ResetButton onClick={() => {\n                    setSubmitted(false);\n                    setGender('');\n                    setExplanationEnabled(false);\n                    setExplanation(undefined);\n                }} />\n            </>\n        );\n    }\n}\n\nfunction BadCheckboxes() {\n    const boxes = ['male', 'female', 'transgender', 'nonbinary', 'other', 'opt-out'] as const;\n    type Box = typeof boxes[number];\n    type Options = { [k in Box]: boolean };\n    const [submitted, setSubmitted] = useState(false);\n    const [isChecked, setIsChecked] = useState<Options>({\n        'male': false,\n        'female': false,\n        'transgender': false,\n        'nonbinary': false,\n        'other': false,\n        'opt-out': false,\n    });\n    const [explanationEnabled, setExplanationEnabled] = useState(false);\n    const [explanation, setExplanation] = useState<string | undefined>(undefined);\n    const [changed, setChanged] = useState(false);\n\n    function check(option: Box, checked: boolean) {\n        setChanged(true);\n        setIsChecked((cur: Options) => ({ ...cur, [option]: checked }));\n    }\n\n    function reset() {\n        setChanged(false);\n        setExplanationEnabled(false);\n        setExplanation(undefined);\n        setSubmitted(false);\n        setIsChecked({\n            'male': false,\n            'female': false,\n            'transgender': false,\n            'nonbinary': false,\n            'other': false,\n            'opt-out': false,\n        })\n    }\n\n    const noneChecked = boxes.every(k => !isChecked[k]);\n    const checkboxErr = noneChecked && changed ? \"Check at least one\" : undefined;\n    const explanationErr = validate(requireNonempty, explanation);\n    const isDisabled = noneChecked || (explanationEnabled && anyMissing([explanation, explanationErr]));\n\n    if (!submitted) {\n        return (\n            <>\n                <div>\n                    <FormControl required error={checkboxErr !== undefined} className=\"form-control\" style={{ display: \"block\", marginBottom: \"10px\" }}>\n                        <FormLabel component=\"legend\">Gender</FormLabel>\n                        <FormGroup className=\"form-control\">\n                            <FormControlLabel label=\"Female/woman\" control={<Checkbox onChange={(event) => {\n                                check(\"female\", event.target.checked);\n                            }} />} />\n                            <FormControlLabel label=\"Male/man\" control={<Checkbox onChange={(event) => {\n                                check(\"male\", event.target.checked);\n                            }} />} />\n                            <FormControlLabel label=\"Nonbinary\" control={<Checkbox onChange={(event) => {\n                                check(\"nonbinary\", event.target.checked);\n                            }} />} />\n                            <FormControlLabel label=\"Transgender\" control={<Checkbox onChange={(event) => {\n                                check(\"transgender\", event.target.checked);\n                            }} />} />\n                            <FormControlLabel label=\"Not listed above\" control={<Checkbox onChange={(event) => {\n                                let checked = event.target.checked;\n                                check(\"other\", checked);\n                                if (checked) {\n                                    setExplanationEnabled(true);\n                                } else {\n                                    setExplanationEnabled(false);\n                                    setExplanation(undefined);\n                                }\n                            }} />} />\n                            {\n                                !explanationEnabled\n                                    ? undefined\n                                    : <FormControl className=\"form-control\">\n                                        <TextField\n                                            required={explanationEnabled}\n                                            disabled={!explanationEnabled}\n                                            error={explanationEnabled && explanationErr !== undefined}\n                                            label=\"Explain (if not listed)\"\n                                            helperText={explanationErr}\n                                            onChange={(event) => setExplanation(event.target.value as string)}\n                                            style={{ minWidth: \"10em\" }}\n                                        />\n                                    </FormControl>\n                            }\n                            <FormControlLabel label=\"Prefer not to answer\" control={<Checkbox onChange={(event) => {\n                                check(\"opt-out\", event.target.checked);\n                            }} />} />\n                        </FormGroup>\n                    </FormControl>\n                    {checkboxErr !== undefined ? <FormHelperText error>{checkboxErr}</FormHelperText> : undefined}\n                </div>\n                <SubmitButton disabled={isDisabled} onClick={() => setSubmitted(true)} />\n            </>\n        );\n    } else {\n        return (\n            <>\n                <p>Try this form from the perspective of a cis person, a nonbinary person, and a binary trans person. Is the form still flexible? Is it othering?</p>\n                <p>How would the answer of a trans man differ from that of a cis man? Is this desirable?</p>\n                <ResetButton onClick={() => reset()} />\n            </>\n        );\n    }\n}\n\nfunction BetterCheckboxes() {\n    const genders = ['male', 'female', 'nonbinary', 'other', 'questioning', 'opt-out'] as const;\n    type GenderBox = typeof genders[number];\n    type GenderOptions = { [k in GenderBox]: boolean };\n    const [submitted, setSubmitted] = useState(false);\n    const [isGenderChecked, setIsGenderChecked] = useState<GenderOptions>({\n        'male': false,\n        'female': false,\n        'nonbinary': false,\n        'other': false,\n        'questioning': false,\n        'opt-out': false,\n    });\n    const [explanationEnabled, setExplanationEnabled] = useState(false);\n    const [explanation, setExplanation] = useState<string | undefined>(undefined);\n    const [genderChanged, setGenderChanged] = useState(false);\n\n    type Alignment = 'cis' | 'trans' | 'questioning' | 'opt-out';\n    const [alignment, setAlignment] = useState<Alignment | undefined>(undefined);\n\n    function setGender(option: GenderBox, checked: boolean) {\n        setGenderChanged(true);\n        setIsGenderChecked(cur => ({ ...cur, [option]: checked }));\n    }\n\n    function reset() {\n        setGenderChanged(false);\n        setExplanationEnabled(false);\n        setExplanation(undefined);\n        setSubmitted(false);\n        setIsGenderChecked({\n            'male': false,\n            'female': false,\n            'nonbinary': false,\n            'other': false,\n            'questioning': false,\n            'opt-out': false,\n        })\n        setAlignment(undefined);\n    }\n\n    const noGenderChecked = genders.every(k => !isGenderChecked[k]);\n    const noAlignmentChecked = alignment === undefined;\n    const genderCheckboxErr = noGenderChecked && genderChanged ? \"Check at least one\" : undefined;\n    const explanationErr = validate(requireNonempty, explanation);\n    const isDisabled = noGenderChecked || noAlignmentChecked || (explanationEnabled && anyMissing([explanation, explanationErr]));\n\n    if (!submitted) {\n        return (\n            <>\n                <div>\n                    <FormControl required error={genderCheckboxErr !== undefined} className=\"form-control\" style={{ display: \"block\", marginBottom: \"10px\" }}>\n                        <FormLabel component=\"legend\">Gender</FormLabel>\n                        <FormGroup className=\"form-control\">\n                            <FormControlLabel label=\"Female/woman\" control={<Checkbox onChange={(event) => {\n                                setGender(\"female\", event.target.checked);\n                            }} />} />\n                            <FormControlLabel label=\"Male/man\" control={<Checkbox onChange={(event) => {\n                                setGender(\"male\", event.target.checked);\n                            }} />} />\n                            <FormControlLabel label=\"Nonbinary\" control={<Checkbox onChange={(event) => {\n                                setGender(\"nonbinary\", event.target.checked);\n                            }} />} />\n                            <FormControlLabel label=\"Not listed above\" control={<Checkbox onChange={(event) => {\n                                let checked = event.target.checked;\n                                setGender(\"other\", checked);\n                                if (checked) {\n                                    setExplanationEnabled(true);\n                                } else {\n                                    setExplanationEnabled(false);\n                                    setExplanation(undefined);\n                                }\n                            }} />} />\n                            {\n                                !explanationEnabled\n                                    ? undefined\n                                    : <FormControl className=\"form-control\">\n                                        <TextField\n                                            required={explanationEnabled}\n                                            disabled={!explanationEnabled}\n                                            error={explanationEnabled && explanationErr !== undefined}\n                                            label=\"Explain (if not listed)\"\n                                            helperText={explanationErr}\n                                            onChange={(event) => setExplanation(event.target.value as string)}\n                                            style={{ minWidth: \"10em\" }}\n                                        />\n                                    </FormControl>\n                            }\n                            <FormControlLabel label=\"Unsure/questioning\" control={<Checkbox onChange={(event) => {\n                                setGender(\"questioning\", event.target.checked);\n                            }} />} />\n                            <FormControlLabel label=\"Prefer not to answer\" control={<Checkbox onChange={(event) => {\n                                setGender(\"opt-out\", event.target.checked);\n                            }} />} />\n                        </FormGroup>\n                    </FormControl>\n                    {genderCheckboxErr !== undefined ? <FormHelperText error>{genderCheckboxErr}</FormHelperText> : undefined}\n                </div>\n\n                <div>\n                    <FormControl required component=\"fieldset\" className=\"form-control\" style={{ display: \"block\", marginBottom: \"10px\" }}>\n                        <FormLabel component=\"legend\">Gender Alignment</FormLabel>\n                        <RadioGroup className=\"form-control\" onChange={(event) => setAlignment(event.target.value as Alignment)}>\n                            <FormControlLabel label=\"Cisgender\" value=\"cis\" control={<Radio />} />\n                            <FormControlLabel label=\"Transgender\" value=\"trans\" control={<Radio />} />\n                            <FormControlLabel label=\"Unsure/questioning\" value=\"questioning\" control={<Radio />} />\n                            <FormControlLabel label=\"Prefer not to answer\" value=\"opt-out\" control={<Radio />} />\n                        </RadioGroup>\n                    </FormControl>\n                </div>\n                <SubmitButton disabled={isDisabled} onClick={() => setSubmitted(true)} />\n            </>\n        );\n    } else {\n        return (\n            <>\n                <ResetButton onClick={() => reset()} />\n            </>\n        );\n    }\n}\n\nfunction TextboxGender() {\n    const [submitted, setSubmitted] = useState(false);\n    const [gender, setGender] = useState<string | undefined>(undefined);\n\n    const genderErr = validate(requireNonempty, gender);\n    const isDisabled = anyMissing([gender, genderErr]);\n\n    if (!submitted) {\n        return (\n            <>\n                <div>\n                    <FormControl className=\"form-control\">\n                        <TextField\n                            required\n                            error={genderErr !== undefined}\n                            label=\"Gender\"\n                            variant=\"filled\"\n                            helperText={genderErr}\n                            onChange={(event) => setGender(event.target.value as string)}\n                            style={{ minWidth: \"20em\" }}\n                        />\n                    </FormControl>\n                </div>\n                <SubmitButton disabled={isDisabled} onClick={() => {\n                    setSubmitted(true);\n                }} />\n            </>\n        );\n    } else {\n        return (\n            <>\n                <p><Link href=\"https://dl.acm.org/doi/10.1145/3411764.3445742\">A study found</Link> that both binary and nonbinary participants rated this kind of form to be the most inclusive, least misgendering, and most comfortable to fill out. The second most well-received form was one similar to the one above.</p>\n\n                <p>However, the agreement was not unanimous. Which form do you prefer? Would you personally prefer to have discrete categories, or an open text box?</p>\n\n                <ResetButton onClick={() => {\n                    setSubmitted(false);\n                    setGender(undefined);\n                }} />\n            </>\n        );\n    }\n}\n\nexport default function Genders() {\n    return (\n        <>\n            <h2 className=\"page-header\" id=\"genders\">Genders</h2>\n\n            <p className=\"page-text\">It goes without question that gender is present in many aspects of society. It influences our identities, social groups, and interactions. In Western culture, the traditional Western binary view of gender identities is deeply integrated into society, culture, and infrastructure, despite increasing visibility of marginalized gender identities, such as nonbinary people. As a result, transgender, nonbinary, and intersex individuals often face many difficulties when interacting with systems working under traditional expectations of binary gender and sex.</p>\n            <p className=\"page-text\">Furthermore, even with increasing visibility of marginalized gender identities, those with marginalized gender identities are often grouped together. In reality, nonbinary individuals often have different needs than binary transgender individuals, who are often not entirely barred by systems expecting a binary gender.</p>\n            <p className=\"page-text\">As much of our infrastructure is coupled to gender, it is no surprise that this coupling is also present on the internet. Due to the importance of the internet in accessing services, inclusive design is especially important in web and software design; exclusive design can act as a gate preventing users from accessing important information and services. As designers and developers, we must be aware of the needs of those of marginalized gender identities, analyze how and why our data is collected, and be careful to not exclude or alienate users from accessing important services.</p>\n\n            <p className=\"page-text\">If you've registered for an account on the internet before, you've likely seen a form like this before:</p>\n\n            <FormCard title=\"Example Form\" subheader=\"A sample website registration form\">\n                <SampleForm />\n            </FormCard>\n\n            <p className=\"page-text\">This is an example of a form that demonstrates how a nonbinary individual might be barred from a service by poor form design. In this case, there is no option for those who are neither male nor female. In this case, nonbinary individuals are left with one of two options:</p>\n            <ul className=\"page-text\">\n                <li>Intentionally provide inaccurate information &mdash; self-misgendering in this manner is more than a mere social inconvenience. Aside from social and emotional stress, this can expose the individual to unnecessary harm in some contexts, and will likely require them to later clarify if the user does not align with the service's expectation of the selected gender.</li>\n                <li>Opt out of the service entirely &mdash; while this may be an option for a service such as a social media site, it may be a greater issue for essential services, such as healthcare-related services.</li>\n            </ul>\n\n            <p className=\"page-text\">The most common approach is not significantly better:</p>\n\n            <FormCard title=\"Example Gender Input\" subheader='\"Other\" and opting out'>\n                <BinaryDropdownWithOptOut />\n            </FormCard>\n\n            <p className=\"page-text\">First, the good parts:</p> \n\n            <ul className=\"page-text\">\n                <li>This form is less <em>limiting</em>, in that individuals are not forced to provide inaccurate information due to limitations of the form.</li>\n                <li>It provides an opt-out, which is important for individuals who are concerned with the data usage, with their safety, or are unsure of or questioning their identity.</li>\n            </ul>\n\n            <p className=\"page-text\">However, this form still lacks <em>flexibility</em>. \"Other\" may include many different cases; \"nonbinary\" is a rather large umbrella term, for example, and individuals may wish to distinguish whether they are genderfluid, agender, etc. A . If possible, space should be given for elaboration if one's gender is not listed explicitly on the form, for example:</p> \n\n            <FormCard title=\"Example Gender Input\" subheader='Allowing elaboration'>\n                <BinaryDropdownWithOptOutAndField />\n            </FormCard>\n\n            <p className=\"page-text\">However, these forms raise the question: why are nonbinary individuals \"other\"? This is an example of <em>othering</em>, and considers nonbinary people to be not \"normal\". By placing traditional genders in the position of normalcy and everything else as \"other\", this hurts the normalization of marginalized gender identities.</p> \n\n            <p className=\"page-text\">With gender input on forms, we should aim for the following:</p>\n\n            <ul className=\"page-text\">\n                <li>Be <em>inclusive</em> &mdash; users should have a way to accurately express their gender</li>\n                <li>Be <em>flexible</em> &mdash; users should not be limited to a set of restricted options, but should have a way to elaborate</li>\n                <li><em>Normalize</em> and avoid <em>othering</em> &mdash; users should not feel as though they are not \"normal\"</li>\n            </ul>\n\n            <p className=\"page-text\">It is clearly not possible to accurately enumerate every gender identity in a dropdown (though some social media sites, such as Facebook, have attempted to do this to some degree in the past); to do so will inevitably exclude some identities, require the maintainers to constantly update the list, and force developers and designers to take political stances on what should or should not be considered a valid identity. This is not a practical approach. Instead, we must aim for a balance between detail and ease of use, while maintaining flexibility.</p>\n\n            <p className=\"page-text\">Here is one such attempt at inclusion:</p>\n\n            <FormCard title=\"Example Gender Input\" subheader=\"Multiple-select checkboxes\">\n                <BadCheckboxes />\n            </FormCard>\n\n            <p className=\"page-text\">Note that a box is still provided in the case of \"Not listed above\"; it simply does not appear until the box is checked.</p>\n\n            <p className=\"page-text\">This is clearly a better attempt at inclusion, but still has several areas for improvement. Perhaps the biggest is a failure to distinguish <em>gender</em> from <em>gender alignment</em>; i.e., whether an individual is cisgender, transgender, nonbinary, etc. A cisgender woman filling out this form would check \"woman\", but a transgender woman filling out this form would check both \"woman\" and \"transgender\". Both people are women and have the same gender, so why do they have different answers to the question about gender? This is a subtle case of othering &mdash; cis people are positioned as more \"normal\" than trans people.</p>\n\n            <p className=\"page-text\">Note also that terms such as \"male-to-female\" or \"assigned female at birth\" should generally be avoided, as they are generally contentious and outdated terms, and are regarded differently by different individuals.</p>\n\n            <p className=\"page-text\">Instead, these two concepts should be separated into different questions entirely. Here is a better version, appropriately separating the two concepts:</p>\n\n            <FormCard title=\"Example Gender Input\" subheader=\"Better multiple-select checkboxes\">\n                <BetterCheckboxes />\n            </FormCard>\n\n            <p className=\"page-text\">Alternatively, if possible, an ideal solution may be to simply provide a text box, and permit an individual to freely describe their gender:</p>\n\n            <FormCard title=\"Example Gender Input\" subheader=\"Freeform text input\">\n                <TextboxGender />\n            </FormCard>\n\n            <h3 className=\"page-header\" id=\"solutions\">Solutions</h3>\n\n            <p className=\"page-text\">There is no single best solution to collecting information on a user's gender. For example, on a dating site, having categories in a form may be preferable to a free-form text input, so that users may filter according to their preferences. In comparison, on a social media site, it may be more desirable for users to express their gender with fewer limitations.</p>\n\n            <p className=\"page-text\"></p>\n\n            <div style={{ margin: \"auto\", justifyContent: \"center\", alignItems: \"center\" }}>\n                <figure style={{ margin: \"auto\", textAlign: \"center\" }}>\n                    <img src={`${process.env.PUBLIC_URL}/fb.gif`} alt=\"A demonstration of changing your gender with Facebook. The cursor selects a dropdown with options 'Female', 'Male', or 'Custom', selects 'Custom', and enters 'Gender Fluid' in a typeahead dialogue.\" />\n                    <figcaption><i>Instead of an open text box, Facebook's gender input system includes a tag-based system with a multitude of options, which can be selected via an alphabetically-sorted typeahead box.</i></figcaption>\n                </figure>\n            </div>\n\n            <p className=\"page-text\">Instead, when designing forms for inputting gender (and user data in general), we should ask ourselves the following questions:</p>\n\n            <ul className=\"page-text\">\n                <li>Why do we need this data; what will it be used for?</li>\n                <li>What are you trying to get the user to communicate about themself by collecting this data?</li>\n                <li>Who will this data be shared with (other users on a website, only healthcare providers, etc.), and how will they react to the data? Could it be used to help and/or harm the user?</li>\n            </ul>\n\n            <p className=\"page-text\">For example, a hospital may ask for a patient's gender on their input form, with the expectation that this will provide medically-relevant information. However, the underlying issue here is the assumption that gender implies a person's anatomy or sex, which is not necessarily the case.</p>\n\n            <p className=\"page-text\">If a form is attempting to use gender to seek medical information about a person's anatomy, it would be preferable to ask for anatomical information directly. If a form is asking for gender to know how to address someone, it would be preferable to instead prompt for someone's pronouns and/or preferred title.</p>\n\n            <p className=\"page-text\">Finally, if gender is not actually necessary for an application or service, then the easiest and most effective solution is simply to not ask for it in the first place.</p>\n        </>\n    );\n}\n","import { Link } from '@material-ui/core';\n\nexport default function Sources() {\n    return (\n        <>\n            <h2 className=\"page-header\">Sources and Further Reading</h2>\n\n            <h3 className=\"page-header\">Gender</h3>\n            <ul className=\"page-text\">\n                <li><Link href=\"https://dl.acm.org/doi/10.1145/3411764.3445742\">Revisiting Gendered Web Forms: An Evaluation of Gender Inputs with (Non-)Binary People</Link> &mdash; a study of reception to different forms for collecting gender, and recommendations on how to improve gender collection</li>\n                <li><Link href=\"https://dl.acm.org/doi/10.1145/3461778.3462033\">”Why are they all obsessed with Gender?” &mdash; (Non)binary Navigations through Technological Infrastructures</Link> &mdash; an autoethnography of a non-binary individual navigating binary-gendered technological infrastructures, and suggestions on how to improve the state of gender in technology</li>\n                <li><Link href=\"https://journals.sagepub.com/doi/10.1177/2056305116672486\">Baking Gender Into Social Media Design: How Platforms Shape Categories for Users and Advertisers</Link> &mdash; an analysis of how different social media platforms categorize gender, and the influence of social media over user categorization in general</li>\n                <li><Link href=\"https://learning.oreilly.com/library/view/designing-ux-forms/9781457199912/\">Designing UX: Forms</Link> &mdash; not publicly available, but free with an institution account. A fantastic book on form design and user data collection, covering much more than just names and genders (though its coverage of both topics is excellent).</li>\n            </ul>\n\n            <h3 className=\"page-header\">Names</h3>\n            <ul className=\"page-text\">\n                <li><Link href=\"https://shinesolutions.com/2018/01/08/falsehoods-programmers-believe-about-names-with-examples/\">Falsehoods Programmers Believe About Names - With Examples</Link> &mdash; A version of the famous <Link href=\"https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/\">Falsehoods Programmers Believe About Names</Link>, a blog post listing common misconceptions about the types of names one might encounter. This version has been annotated with explanations and examples demonstrating why each assumption does not hold.</li>\n                <li><Link href=\"https://www.w3.org/International/questions/qa-personal-names\">Personal names around the world</Link> &mdash; an article from the W3C discussing how names differ around the world and giving recommendations on how to best collect them.</li>\n                <li><Link href=\"https://www.bbc.com/future/article/20160325-the-names-that-break-computer-systems\">These unlucky people have names that break computers</Link> &mdash; examples of people who have been affected by poor name validation, and some common edge cases to watch out for.</li>\n                <li><Link href=\"https://www.wired.com/2015/11/null/\">Hello, I'm Mr. Null. My Name Makes Me Invisible to Computers</Link> &mdash; while not strictly related to false assumptions about names, this demonstrates the importance of being careful about how names are handled in any computer system.</li>\n            </ul>\n        </>\n    );\n}","import { AppBar, IconButton, Toolbar, Typography, Container } from '@material-ui/core';\nimport About from './About';\nimport Names from './Names';\nimport Genders from './Genders';\nimport Sources from './Sources';\nimport { BrowserRouter, Route, Routes, Link, Navigate } from 'react-router-dom';\n\nfunction Bar() {\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                <Typography variant=\"h5\" style={{ flexGrow: 1 }}>\n                    Identity Forms\n                </Typography>\n                <IconButton color=\"inherit\" component={Link} to=\"/about\">About</IconButton>\n                <IconButton color=\"inherit\" component={Link} to=\"/names\">Names</IconButton>\n                <IconButton color=\"inherit\" component={Link} to=\"/genders\">Genders</IconButton>\n                <IconButton color=\"inherit\" component={Link} to=\"/sources\">Sources</IconButton>\n            </Toolbar>\n        </AppBar>\n    );\n}\n\nfunction Page(props: { children: JSX.Element }) {\n    return (\n        <>\n            <Bar />\n            <Container maxWidth=\"md\">\n                {props.children}\n            </Container>\n        </>\n    );\n}\n\nexport default function App() {\n    const url = `${process.env.PUBLIC_URL}`;\n    return (\n        <>\n            <BrowserRouter basename={url}>\n                <Routes>\n                    <Route path=\"/\" element={<Navigate to=\"/about\"/>} />\n                    <Route path=\"/about\" element={<Page><About/></Page>} />\n                    <Route path=\"/names\" element={<Page><Names/></Page>} />\n                    <Route path=\"/genders\" element={<Page><Genders/></Page>} />\n                    <Route path=\"/sources\" element={<Page><Sources/></Page>} />\n                    <Route path=\"*\" element={<Navigate to=\"/about\"/>} />\n                </Routes>\n            </BrowserRouter>\n        </>\n    );\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}